{
  "{\"sourceRoot\":\"I:\\\\Git\\\\boilerplate-project-sudoku-solver\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"I:\\\\Git\\\\boilerplate-project-sudoku-solver\",\"filename\":\"I:\\\\Git\\\\boilerplate-project-sudoku-solver\\\\routes\\\\api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"I:\\\\Git\\\\boilerplate-project-sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "I:\\Git\\boilerplate-project-sudoku-solver\\routes\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "I:\\Git\\boilerplate-project-sudoku-solver",
      "filename": "I:\\Git\\boilerplate-project-sudoku-solver\\routes\\api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "I:\\Git\\boilerplate-project-sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "I:\\Git\\boilerplate-project-sudoku-solver\\routes\\api.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "I:\\Git\\boilerplate-project-sudoku-solver\\routes\\api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "I:\\Git\\boilerplate-project-sudoku-solver\\routes\\",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nvar SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  // Get the sudoku solver.\n  var solver = new SudokuSolver();\n  app.route('/api/check').post(function (req, res) {\n    // Inputs.\n    var puzzle = req.body.puzzle;\n    var coord = req.body.coordinate;\n    var val = req.body.value; // Check input fields exist.\n\n    if (puzzle == undefined | coord == undefined | val == undefined) return res.json({\n      \"error\": \"Required field(s) missing\"\n    }); // Test the inputs are valid.\n\n    var reCoord = /^([A-Ia-i])([1-9])$/;\n    var reVal = /^[1-9]$/;\n    var rePuz = /[^1-9\\.]/;\n    if (!reCoord.test(coord)) return res.json({\n      \"error\": \"Invalid coordinate\"\n    });\n    if (!reVal.test(val)) return res.json({\n      \"error\": \"Invalid value\"\n    });\n    if (puzzle.length != 81) return res.json({\n      \"error\": \"Expected puzzle to be 81 characters long\"\n    });\n    if (rePuz.test(puzzle)) return res.json({\n      \"error\": \"Invalid characters in puzzle\"\n    }); // Get the coordinate representation of the row and column.\n\n    var _coord$match = coord.match(reCoord),\n        _coord$match2 = _slicedToArray(_coord$match, 3),\n        _ = _coord$match2[0],\n        row = _coord$match2[1],\n        col = _coord$match2[2]; // Test the value is already in that coordinate of the puzzle.\n\n\n    if (solver.checkDuplicateValue(puzzle, row, col, val)) return res.json({\n      \"valid\": true\n    }); // Determine if the value violates the row, column, and region sudoku rules.\n\n    var validRow = solver.checkRowPlacement(puzzle, row, col, val);\n    var validCol = solver.checkColPlacement(puzzle, row, col, val);\n    var validReg = solver.checkRegionPlacement(puzzle, row, col, val);\n    if (validRow & validCol & validReg) return res.json({\n      \"valid\": true\n    }); // Determine the conflicts (if they exist).\n\n    var conflict = [];\n    if (!validRow) conflict.push(\"row\");\n    if (!validCol) conflict.push(\"column\");\n    if (!validReg) conflict.push(\"region\");\n    return res.json({\n      \"valid\": false,\n      conflict: conflict\n    });\n  });\n  app.route('/api/solve').post(function (req, res) {\n    // Inputs.\n    var puzzle = req.body.puzzle; // Error if no puzzle is defined.\n\n    if (puzzle == undefined) return res.json({\n      error: 'Required field missing'\n    }); // Error if the puzzle has too many characters.\n\n    if (puzzle.length != 81) return res.json({\n      \"error\": \"Expected puzzle to be 81 characters long\"\n    }); // Error if the puzzle contains invalid characters.\n\n    var rePuz = /[^1-9\\.]/;\n    if (rePuz.test(puzzle)) return res.json({\n      \"error\": \"Invalid characters in puzzle\"\n    }); // Try to solve the puzzle.\n\n    var puzzleArr = _toConsumableArray(puzzle); // Error if it does not solve.\n\n\n    if (!solver.solve(puzzleArr)) return res.json({\n      \"error\": \"Puzzle cannot be solved\"\n    }); // Return the solution.\n\n    return res.json({\n      \"solution\": puzzleArr.join(\"\")\n    });\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "puzzle",
        "body",
        "coord",
        "coordinate",
        "val",
        "value",
        "undefined",
        "json",
        "reCoord",
        "reVal",
        "rePuz",
        "test",
        "length",
        "match",
        "_",
        "row",
        "col",
        "checkDuplicateValue",
        "validRow",
        "checkRowPlacement",
        "validCol",
        "checkColPlacement",
        "validReg",
        "checkRegionPlacement",
        "conflict",
        "push",
        "error",
        "puzzleArr",
        "solve",
        "join"
      ],
      "mappings": "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",
      "sourceRoot": "I:\\Git\\boilerplate-project-sudoku-solver\\routes\\",
      "sourcesContent": [
        "'use strict';\r\n\r\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\r\n\r\nmodule.exports = function (app) {\r\n  \r\n  // Get the sudoku solver.\r\n  let solver = new SudokuSolver();\r\n\r\n  app.route('/api/check')\r\n    .post((req, res) => {\r\n\r\n      // Inputs.\r\n      let puzzle = req.body.puzzle;\r\n      let coord = req.body.coordinate;\r\n      let val = req.body.value;\r\n\r\n      // Check input fields exist.\r\n      if (puzzle==undefined | coord==undefined | val==undefined ) return res.json({ \"error\": \"Required field(s) missing\" });\r\n\r\n      // Test the inputs are valid.\r\n      let reCoord = /^([A-Ia-i])([1-9])$/;\r\n      let reVal = /^[1-9]$/;\r\n      let rePuz = /[^1-9\\.]/;\r\n      if (!reCoord.test(coord)) return res.json({ \"error\": \"Invalid coordinate\" });\r\n      if (!reVal.test(val)) return res.json({ \"error\": \"Invalid value\" });\r\n      if (puzzle.length != 81) return res.json({ \"error\": \"Expected puzzle to be 81 characters long\" });\r\n      if (rePuz.test(puzzle)) return res.json({ \"error\": \"Invalid characters in puzzle\" });\r\n      \r\n      // Get the coordinate representation of the row and column.\r\n      let [_, row, col] = coord.match(reCoord);\r\n      \r\n      // Test the value is already in that coordinate of the puzzle.\r\n      if (solver.checkDuplicateValue(puzzle,row ,col, val)) return res.json({ \"valid\": true });\r\n\r\n      // Determine if the value violates the row, column, and region sudoku rules.\r\n      let validRow = solver.checkRowPlacement(puzzle,row ,col, val);\r\n      let validCol = solver.checkColPlacement(puzzle, row, col, val);\r\n      let validReg = solver.checkRegionPlacement(puzzle, row ,col, val);\r\n      if (validRow & validCol & validReg) return res.json({ \"valid\": true });\r\n\r\n      // Determine the conflicts (if they exist).\r\n      let conflict = [];\r\n      if (!validRow) conflict.push(\"row\");\r\n      if (!validCol) conflict.push(\"column\");\r\n      if (!validReg) conflict.push(\"region\");\r\n\r\n      return res.json({ \"valid\": false, conflict });\r\n    });\r\n    \r\n  app.route('/api/solve')\r\n    .post((req, res) => {\r\n      // Inputs.\r\n      let puzzle = req.body.puzzle;\r\n\r\n      // Error if no puzzle is defined.\r\n      if (puzzle == undefined) return res.json({error: 'Required field missing'});\r\n      \r\n      // Error if the puzzle has too many characters.\r\n      if (puzzle.length != 81) return res.json({ \"error\": \"Expected puzzle to be 81 characters long\" });\r\n\r\n      // Error if the puzzle contains invalid characters.\r\n      let rePuz = /[^1-9\\.]/;\r\n      if (rePuz.test(puzzle)) return res.json({ \"error\": \"Invalid characters in puzzle\" });\r\n\r\n      // Try to solve the puzzle.\r\n      let puzzleArr = [...puzzle];\r\n      // Error if it does not solve.\r\n      if (!solver.solve(puzzleArr)) return res.json({ \"error\": \"Puzzle cannot be solved\" });\r\n      // Return the solution.\r\n      return res.json({ \"solution\":  puzzleArr.join(\"\")});\r\n    });\r\n};"
      ]
    },
    "sourceType": "script",
    "mtime": 1724532579589
  },
  "{\"sourceRoot\":\"I:\\\\Git\\\\boilerplate-project-sudoku-solver\\\\controllers\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"I:\\\\Git\\\\boilerplate-project-sudoku-solver\",\"filename\":\"I:\\\\Git\\\\boilerplate-project-sudoku-solver\\\\controllers\\\\sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"I:\\\\Git\\\\boilerplate-project-sudoku-solver\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "I:\\Git\\boilerplate-project-sudoku-solver\\controllers\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "I:\\Git\\boilerplate-project-sudoku-solver",
      "filename": "I:\\Git\\boilerplate-project-sudoku-solver\\controllers\\sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "I:\\Git\\boilerplate-project-sudoku-solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "I:\\Git\\boilerplate-project-sudoku-solver\\controllers\\sudoku-solver.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "I:\\Git\\boilerplate-project-sudoku-solver\\controllers\\sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "I:\\Git\\boilerplate-project-sudoku-solver\\controllers\\",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// Class that defines the related indexes for a cell index [0-80].\n// It can tell what the cells row indices, column indices, region indices, \n// adjacent rows indices (that are in the same region), adjacent \n// column indices (that are in the same region).\nvar Cell = function Cell(idx) {\n  _classCallCheck(this, Cell);\n\n  //The index\n  this.idx = idx; //The indices for the row that contain this cell.\n\n  var rowStart = Math.floor(idx / 9);\n  var incre = [0, 1, 2, 3, 4, 5, 6, 7, 8];\n  this.rowIdxs = incre.map(function (x) {\n    return 9 * rowStart + x;\n  }); //The indices for the column that contain this cell.\n\n  var colStart = idx % 9;\n  this.colIdxs = incre.map(function (x) {\n    return colStart + x * 9;\n  }); //The indices for the region that contain this cell.\n\n  var regStart = Math.floor(rowStart / 3) * 27 + Math.floor(colStart / 3) * 3;\n  this.regIdxs = incre.map(function (x) {\n    return regStart + Math.floor(x / 3) * 9 + x % 3;\n  }); //The indices for the adjacent rows that are in this region.\n\n  var rowRegStart = 3 * Math.floor(rowStart / 3);\n  var next1Row = 9 * (rowRegStart + (rowStart + 1) % 3);\n  var next2Row = 9 * (rowRegStart + (rowStart + 2) % 3);\n  this.adjRegRowIdxs = [].concat(_toConsumableArray(incre.map(function (x) {\n    return next1Row + x;\n  })), _toConsumableArray(incre.map(function (x) {\n    return next2Row + x;\n  }))); //The indices for the adjacent columns that are in this region.\n\n  var colRegStart = 3 * Math.floor(colStart / 3);\n  var next1Col = colRegStart + (colStart + 1) % 3;\n  var next2Col = colRegStart + (colStart + 2) % 3;\n  this.adjRegColIdxs = [].concat(_toConsumableArray(incre.map(function (x) {\n    return next1Col + x * 9;\n  })), _toConsumableArray(incre.map(function (x) {\n    return next2Col + x * 9;\n  })));\n}; // Class that generates all the cell values for all 80 cells.\n\n\nvar Indexer = function Indexer() {\n  _classCallCheck(this, Indexer);\n\n  this.lookup = {};\n\n  for (var i = 0; i < 81; i++) {\n    this.lookup[i] = new Cell(i);\n  }\n}; // Lookup for the row values to numbers [0-8].\n\n\nvar rowLookup = {\n  \"A\": 0,\n  \"B\": 1,\n  \"C\": 2,\n  \"D\": 3,\n  \"E\": 4,\n  \"F\": 5,\n  \"G\": 6,\n  \"H\": 7,\n  \"I\": 8,\n  \"a\": 0,\n  \"b\": 1,\n  \"c\": 2,\n  \"d\": 3,\n  \"e\": 4,\n  \"f\": 5,\n  \"g\": 6,\n  \"h\": 7,\n  \"i\": 8\n}; // Lookup for the column values to numbers [0-8].\n\nvar colLookup = function colLookup(col) {\n  return col - 1;\n}; // Maps the cell coordinates to a cell index [0-80].\n\n\nvar cellIdxMap = function cellIdxMap(row, col) {\n  return 9 * rowLookup[row] + colLookup(col);\n}; // Returns the substring of the puzzle that represents the rows.\n\n\nvar rowString = function rowString(puzzleString, cellIdx) {\n  return indexer.lookup[cellIdx].rowIdxs.map(function (x) {\n    return puzzleString[x];\n  }).join();\n}; // Returns the substring of the puzzle that represents the columns.\n\n\nvar colString = function colString(puzzleString, cellIdx) {\n  return indexer.lookup[cellIdx].colIdxs.map(function (x) {\n    return puzzleString[x];\n  }).join();\n}; // Returns the substring of the puzzle that represents the region.\n\n\nvar regionString = function regionString(puzzleString, cellIdx) {\n  return indexer.lookup[cellIdx].regIdxs.map(function (x) {\n    return puzzleString[x];\n  }).join();\n}; // Define the indexer to use in the Sudoku Solver.\n\n\nvar indexer = new Indexer(); // Define the Sudoku solver.\n\nvar SudokuSolver = /*#__PURE__*/function () {\n  function SudokuSolver() {\n    _classCallCheck(this, SudokuSolver);\n  }\n\n  _createClass(SudokuSolver, [{\n    key: \"validate\",\n    // Checks if a puzzle's current inputs do not violate the rules of sudoku.\n    value: function validate(puzzle) {\n      for (var cellIdx = 0; cellIdx < 80; cellIdx++) {\n        // If the cell has an entry.\n        if (puzzle[cellIdx] != \".\") {\n          // Get the value of the cell.\n          var k = puzzle[cellIdx]; // Create a trail puzzle and remove the current cell value.\n\n          var trailPuzzle = puzzle;\n          trailPuzzle[cellIdx] = \".\"; // Make a string of the puzzle.\n\n          var pString = trailPuzzle.join(\"\"); // Get the row.\n\n          var rString = rowString(pString, cellIdx); // Get the column.\n\n          var cString = colString(pString, cellIdx); // Get the region.\n\n          var reString = regionString(pString, cellIdx); // Create the test regex from the cell value.\n\n          var re = new RegExp(k, \"g\"); // If the regex matches the current cell conflicts with the rules of sudoku.\n\n          if (re.test(rString + cString + reString)) {\n            return false;\n          }\n        }\n      } // All cells passed.\n\n\n      return true;\n    } // Checks the coordinate contains a duplicate value.\n\n  }, {\n    key: \"checkDuplicateValue\",\n    value: function checkDuplicateValue(puzzleString, row, column, value) {\n      // Map the coordinates to the cell index.\n      var cellIdx = cellIdxMap(row, column);\n      return puzzleString[cellIdx] == value;\n    } // Check proposed value does not violate the sudoku row rule.\n\n  }, {\n    key: \"checkRowPlacement\",\n    value: function checkRowPlacement(puzzleString, row, column, value) {\n      // Map the coordinates to the cell index.\n      var cellIdx = cellIdxMap(row, column); // Get the puzzle substring that represents the cell's row.\n\n      var rString = rowString(puzzleString, cellIdx); // Regex to check for the value in the row.\n\n      var re = new RegExp(value, \"g\");\n      return !re.test(rString);\n    } // Check proposed value does not violate the sudoku column rule.\n\n  }, {\n    key: \"checkColPlacement\",\n    value: function checkColPlacement(puzzleString, row, column, value) {\n      // Map the coordinates to the cell index.\n      var cellIdx = cellIdxMap(row, column); // Get the puzzle substring that represents the cell's column.\n\n      var cString = colString(puzzleString, cellIdx); // Regex to check for the value in the column.\n\n      var re = new RegExp(value, \"g\");\n      return !re.test(cString);\n    } // Check proposed value does not violate the sudoku region rule.\n\n  }, {\n    key: \"checkRegionPlacement\",\n    value: function checkRegionPlacement(puzzleString, row, column, value) {\n      // Map the coordinates to the cell index.\n      var cellIdx = cellIdxMap(row, column); // Get the puzzle substring that represents the cell's region.\n\n      var reString = regionString(puzzleString, cellIdx); // Regex to check for the value in the region.\n\n      var re = new RegExp(value, \"g\");\n      return !re.test(reString);\n    } // Finds the values for a cell that do not violate the row, column and region rules of sudoku. Takes the coordinate.\n\n  }, {\n    key: \"findAllCellOptions\",\n    value: function findAllCellOptions(puzzleString, row, column) {\n      // Map the coordinates to the cell index.\n      var cellIdx = cellIdxMap(row, column);\n      return this.findAllCellOptionsByCellInd(puzzleString, cellIdx);\n    } //Finds the values for a cell that do not violate the row, column and region rules of sudoku. Takes the cell index.\n\n  }, {\n    key: \"findAllCellOptionsByCellInd\",\n    value: function findAllCellOptionsByCellInd(puzzleString, cellIdx) {\n      // Get the puzzle substring that represents the cell's row.\n      var rString = rowString(puzzleString, cellIdx); // Get the puzzle substring that represents the cell's column.\n\n      var cString = colString(puzzleString, cellIdx); // Get the puzzle substring that represents the cell's region.\n\n      var reString = regionString(puzzleString, cellIdx); // Regex of all the characters not in the rows, columns and regions.\n\n      var re = new RegExp(\"[^\" + rString + cString + reString + \"]\", \"g\"); // Match with all possible values [1-9] and returns an array of the missing entries.\n\n      return \"123456789\".match(re);\n    } // A brute force algorithm.\n\n  }, {\n    key: \"solve\",\n    value: function solve(puzzle) {\n      // Loop over the indices.\n      for (var cellIdx = 0; cellIdx < 81; cellIdx++) {\n        // If the puzzles cell is not set.\n        if (puzzle[cellIdx] == \".\") {\n          // Make the puzzle a string for matching.\n          var pString = puzzle.join(\"\"); // Loop over all the possible cell options.\n\n          for (var k = 1; k < 10; k++) {\n            // Get the puzzle substring that represents the cell's row.\n            var rString = rowString(pString, cellIdx); // Get the puzzle substring that represents the cell's column.\n\n            var cString = colString(pString, cellIdx); // Get the puzzle substring that represents the cell's region.\n\n            var reString = regionString(pString, cellIdx); // Test the guessed value to see if it violates the row, column and region rules of sudoku.\n\n            var re = new RegExp(k, \"g\");\n\n            if (!re.test(rString + cString + reString)) {\n              // Set the puzzle value.\n              puzzle[cellIdx] = k; // Now solve the new puzzle.\n\n              if (this.solve(puzzle)) {\n                // Signals the sub puzzles found the solution.\n                return true;\n              }\n            }\n\n            puzzle[cellIdx] = \".\";\n          } // If all possible guesses for this cell (along with its sub puzzles) did not work, return false.\n\n\n          return false;\n        }\n      } // Signals the sub puzzles found the solution.\n\n\n      return true;\n    }\n  }]);\n\n  return SudokuSolver;\n}();\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "Cell",
        "idx",
        "rowStart",
        "Math",
        "floor",
        "incre",
        "rowIdxs",
        "map",
        "x",
        "colStart",
        "colIdxs",
        "regStart",
        "regIdxs",
        "rowRegStart",
        "next1Row",
        "next2Row",
        "adjRegRowIdxs",
        "colRegStart",
        "next1Col",
        "next2Col",
        "adjRegColIdxs",
        "Indexer",
        "lookup",
        "i",
        "rowLookup",
        "colLookup",
        "col",
        "cellIdxMap",
        "row",
        "rowString",
        "puzzleString",
        "cellIdx",
        "indexer",
        "join",
        "colString",
        "regionString",
        "SudokuSolver",
        "puzzle",
        "k",
        "trailPuzzle",
        "pString",
        "rString",
        "cString",
        "reString",
        "re",
        "RegExp",
        "test",
        "column",
        "value",
        "findAllCellOptionsByCellInd",
        "match",
        "solve",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "I:\\Git\\boilerplate-project-sudoku-solver\\controllers\\",
      "sourcesContent": [
        "\r\n// Class that defines the related indexes for a cell index [0-80].\r\n// It can tell what the cells row indices, column indices, region indices, \r\n// adjacent rows indices (that are in the same region), adjacent \r\n// column indices (that are in the same region).\r\nclass Cell {\r\n  constructor(idx) {\r\n    //The index\r\n    this.idx = idx;\r\n\r\n    //The indices for the row that contain this cell.\r\n    let rowStart = Math.floor(idx/9);\r\n    let incre = [0,1,2,3,4,5,6,7,8];\r\n    this.rowIdxs = incre.map(x => 9*rowStart+x);\r\n\r\n    //The indices for the column that contain this cell.\r\n    let colStart = idx%9;\r\n    this.colIdxs = incre.map(x => colStart+x*9);\r\n\r\n    //The indices for the region that contain this cell.\r\n    let regStart = Math.floor(rowStart/3)*27 + Math.floor(colStart/3)*3;\r\n    this.regIdxs = incre.map(x => regStart+Math.floor(x/3)*9 + x%3);\r\n\r\n    //The indices for the adjacent rows that are in this region.\r\n    let rowRegStart = 3*Math.floor(rowStart/3);\r\n    let next1Row = 9*(rowRegStart + (rowStart+1)%3);\r\n    let next2Row = 9*(rowRegStart + (rowStart+2)%3);\r\n    this.adjRegRowIdxs = [...incre.map(x => next1Row+x) , ...incre.map(x => next2Row+x)];\r\n\r\n    //The indices for the adjacent columns that are in this region.\r\n    let colRegStart = 3*Math.floor(colStart/3);\r\n    let next1Col = colRegStart + (colStart+1)%3;\r\n    let next2Col = colRegStart + (colStart+2)%3;\r\n    this.adjRegColIdxs = [...incre.map(x => next1Col+x*9) , ...incre.map(x => next2Col+x*9)];\r\n  }\r\n}\r\n\r\n// Class that generates all the cell values for all 80 cells.\r\nclass Indexer {\r\n  constructor() {\r\n    this.lookup = {};\r\n    for (let i=0; i<81; i++) {\r\n       this.lookup[i] = new Cell(i);\r\n    }\r\n  }\r\n}\r\n\r\n// Lookup for the row values to numbers [0-8].\r\nlet rowLookup = {\r\n  \"A\":0, \"B\":1, \"C\":2, \r\n  \"D\":3, \"E\":4, \"F\":5, \r\n  \"G\":6, \"H\":7, \"I\":8,\r\n  \"a\":0, \"b\":1, \"c\":2,\r\n  \"d\":3, \"e\":4, \"f\":5, \r\n  \"g\":6, \"h\":7, \"i\":8\r\n}\r\n\r\n// Lookup for the column values to numbers [0-8].\r\nlet colLookup = (col) => {return col-1}\r\n\r\n// Maps the cell coordinates to a cell index [0-80].\r\nlet cellIdxMap = (row, col) => {\r\n  return 9*rowLookup[row] + colLookup(col)\r\n}\r\n\r\n// Returns the substring of the puzzle that represents the rows.\r\nlet rowString = (puzzleString, cellIdx) => {\r\n  return indexer.lookup[cellIdx].rowIdxs.map(x=>puzzleString[x]).join();\r\n}\r\n\r\n// Returns the substring of the puzzle that represents the columns.\r\nlet colString = (puzzleString, cellIdx) => {\r\n  return indexer.lookup[cellIdx].colIdxs.map(x=>puzzleString[x]).join();\r\n}\r\n\r\n// Returns the substring of the puzzle that represents the region.\r\nlet regionString = (puzzleString, cellIdx) => {\r\n  return indexer.lookup[cellIdx].regIdxs.map(x=>puzzleString[x]).join();\r\n}\r\n\r\n// Define the indexer to use in the Sudoku Solver.\r\nlet indexer = new Indexer();\r\n\r\n// Define the Sudoku solver.\r\nclass SudokuSolver {\r\n\r\n  // Checks if a puzzle's current inputs do not violate the rules of sudoku.\r\n  validate(puzzle) {\r\n    for (let cellIdx=0; cellIdx<80; cellIdx++) {\r\n      // If the cell has an entry.\r\n      if (puzzle[cellIdx] != \".\") {\r\n        // Get the value of the cell.\r\n        let k = puzzle[cellIdx];\r\n        // Create a trail puzzle and remove the current cell value.\r\n        let trailPuzzle = puzzle;\r\n        trailPuzzle[cellIdx] = \".\";\r\n        // Make a string of the puzzle.\r\n        let pString = trailPuzzle.join(\"\");\r\n        // Get the row.\r\n        let rString = rowString(pString, cellIdx);\r\n        // Get the column.\r\n        let cString = colString(pString, cellIdx);\r\n        // Get the region.\r\n        let reString = regionString(pString, cellIdx);\r\n        // Create the test regex from the cell value.\r\n        let re = new RegExp(k, \"g\");\r\n        // If the regex matches the current cell conflicts with the rules of sudoku.\r\n        if (re.test(rString+cString+reString)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    // All cells passed.\r\n    return true;\r\n  }\r\n\r\n  // Checks the coordinate contains a duplicate value.\r\n  checkDuplicateValue(puzzleString, row, column, value) {\r\n    // Map the coordinates to the cell index.\r\n    let cellIdx = cellIdxMap(row,column);\r\n    return puzzleString[cellIdx] == value;\r\n  }\r\n  // Check proposed value does not violate the sudoku row rule.\r\n  checkRowPlacement(puzzleString, row, column, value) {\r\n    // Map the coordinates to the cell index.\r\n    let cellIdx = cellIdxMap(row,column);\r\n    // Get the puzzle substring that represents the cell's row.\r\n    let rString = rowString(puzzleString, cellIdx);\r\n    // Regex to check for the value in the row.\r\n    let re = new RegExp(value, \"g\");\r\n    return !re.test(rString);\r\n  }\r\n  // Check proposed value does not violate the sudoku column rule.\r\n  checkColPlacement(puzzleString, row, column, value) {\r\n    // Map the coordinates to the cell index.\r\n    let cellIdx = cellIdxMap(row,column);\r\n    // Get the puzzle substring that represents the cell's column.\r\n    let cString = colString(puzzleString, cellIdx);\r\n    // Regex to check for the value in the column.\r\n    let re = new RegExp(value, \"g\");\r\n    return !re.test(cString);\r\n  }\r\n  // Check proposed value does not violate the sudoku region rule.\r\n  checkRegionPlacement(puzzleString, row, column, value) {\r\n    // Map the coordinates to the cell index.\r\n    let cellIdx = cellIdxMap(row,column);\r\n    // Get the puzzle substring that represents the cell's region.\r\n    let reString = regionString(puzzleString, cellIdx);\r\n    // Regex to check for the value in the region.\r\n    let re = new RegExp(value, \"g\");\r\n    return !re.test(reString);\r\n  }\r\n  // Finds the values for a cell that do not violate the row, column and region rules of sudoku. Takes the coordinate.\r\n  findAllCellOptions(puzzleString, row, column ) {\r\n    // Map the coordinates to the cell index.\r\n    let cellIdx = cellIdxMap(row,column);\r\n    return this.findAllCellOptionsByCellInd(puzzleString, cellIdx);\r\n  }\r\n\r\n  //Finds the values for a cell that do not violate the row, column and region rules of sudoku. Takes the cell index.\r\n  findAllCellOptionsByCellInd(puzzleString, cellIdx) {\r\n    // Get the puzzle substring that represents the cell's row.\r\n    let rString = rowString(puzzleString, cellIdx);\r\n    // Get the puzzle substring that represents the cell's column.\r\n    let cString = colString(puzzleString, cellIdx);\r\n    // Get the puzzle substring that represents the cell's region.\r\n    let reString = regionString(puzzleString, cellIdx);\r\n    // Regex of all the characters not in the rows, columns and regions.\r\n    let re = new RegExp(\"[^\"+rString+cString+reString+\"]\", \"g\");\r\n    // Match with all possible values [1-9] and returns an array of the missing entries.\r\n    return (\"123456789\").match(re);\r\n  }\r\n\r\n  // A brute force algorithm.\r\n  solve(puzzle) {\r\n    // Loop over the indices.\r\n    for (let cellIdx=0; cellIdx<81; cellIdx++ ){\r\n      // If the puzzles cell is not set.\r\n      if (puzzle[cellIdx] == \".\") {\r\n        // Make the puzzle a string for matching.\r\n        let pString = puzzle.join(\"\");\r\n        // Loop over all the possible cell options.\r\n        for (let k=1; k<10; k++ ){\r\n          // Get the puzzle substring that represents the cell's row.\r\n          let rString = rowString(pString, cellIdx);\r\n          // Get the puzzle substring that represents the cell's column.\r\n          let cString = colString(pString, cellIdx);\r\n          // Get the puzzle substring that represents the cell's region.\r\n          let reString = regionString(pString, cellIdx);\r\n          // Test the guessed value to see if it violates the row, column and region rules of sudoku.\r\n          let re = new RegExp(k, \"g\");\r\n          if (!re.test(rString+cString+reString)) {\r\n            // Set the puzzle value.\r\n            puzzle[cellIdx] = k;\r\n            // Now solve the new puzzle.\r\n            if(this.solve(puzzle)) {\r\n              // Signals the sub puzzles found the solution.\r\n              return true;\r\n            }\r\n          }\r\n          puzzle[cellIdx] = \".\";\r\n        }\r\n        // If all possible guesses for this cell (along with its sub puzzles) did not work, return false.\r\n        return false;\r\n      }\r\n    }\r\n    // Signals the sub puzzles found the solution.\r\n    return true;\r\n  }\r\n}\r\n\r\nmodule.exports = SudokuSolver;"
      ]
    },
    "sourceType": "script",
    "mtime": 1724532580698
  }
}